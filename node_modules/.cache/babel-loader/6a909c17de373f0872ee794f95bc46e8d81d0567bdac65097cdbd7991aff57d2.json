{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arund\\\\OneDrive\\\\Desktop\\\\github\\\\capstone\\\\src\\\\MockTest.js\\\\MockTest.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './MockTest.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MockTest = () => {\n  _s();\n  const [topic, setTopic] = useState('');\n  const [questions, setQuestions] = useState([]);\n  const [answers, setAnswers] = useState({});\n  const [score, setScore] = useState(null);\n  const topics = ['React', 'JavaScript', 'HTML', 'Angular']; // Topics for dropdown\n\n  // Fetch questions for selected topic\n  const handleTopicChange = async e => {\n    const selectedTopic = e.target.value;\n    setTopic(selectedTopic);\n    setQuestions([]);\n    setScore(null);\n    if (selectedTopic) {\n      try {\n        const response = await axios.get(`http://localhost:5000/api/mocktest/questions/${selectedTopic}`);\n        setQuestions(response.data); // Assume API returns a list of questions\n      } catch (error) {\n        console.error('Error fetching questions:', error);\n        alert('Failed to fetch questions. Please try again.');\n      }\n    }\n  };\n\n  // Store selected answer for each question\n  const handleOptionSelect = (questionId, selectedOption) => {\n    setAnswers(prev => ({\n      ...prev,\n      [questionId]: selectedOption // Store answer by question ID\n    }));\n  };\n\n  // Calculate score on submit\n  const handleSubmit = () => {\n    let correctCount = 0;\n\n    // Loop through the questions and compare selected answer with correct answer\n    questions.forEach((q, index) => {\n      const userAnswer = answers[index];\n      if (userAnswer === q.correct) {\n        correctCount++;\n      }\n    });\n\n    // Set the score after submission\n    setScore(correctCount);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mock-test\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"mock-test-header\",\n      children: \"Mock Test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dropdown-container\",\n      children: /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: handleTopicChange,\n        value: topic,\n        className: \"dropdown\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select a Topic\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), topics.map((t, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: t,\n          children: t\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), questions.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"questions-container\",\n      children: [questions.map((q, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-block\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"question\",\n          children: q.question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"options-container\",\n          children: q.options.map((option, optIndex) => /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"option-label\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: `question-${index}`,\n              value: option,\n              onChange: () => handleOptionSelect(index, option) // Store answer when an option is selected\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 21\n            }, this), option]\n          }, optIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"submit-button-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"submit-button\",\n          onClick: handleSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this), score !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-container\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Your Score: \", score, \"/\", questions.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(MockTest, \"2v1P6qgPBdlh8IZe0OLPwC1bmc8=\");\n_c = MockTest;\nexport default MockTest;\nvar _c;\n$RefreshReg$(_c, \"MockTest\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","MockTest","_s","topic","setTopic","questions","setQuestions","answers","setAnswers","score","setScore","topics","handleTopicChange","e","selectedTopic","target","value","response","get","data","error","console","alert","handleOptionSelect","questionId","selectedOption","prev","handleSubmit","correctCount","forEach","q","index","userAnswer","correct","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","map","t","length","question","options","option","optIndex","type","name","onClick","_c","$RefreshReg$"],"sources":["C:/Users/arund/OneDrive/Desktop/github/capstone/src/MockTest.js/MockTest.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './MockTest.css';\r\n\r\nconst MockTest = () => {\r\n  const [topic, setTopic] = useState('');\r\n  const [questions, setQuestions] = useState([]);\r\n  const [answers, setAnswers] = useState({});\r\n  const [score, setScore] = useState(null);\r\n\r\n  const topics = ['React', 'JavaScript', 'HTML', 'Angular']; // Topics for dropdown\r\n\r\n  // Fetch questions for selected topic\r\n  const handleTopicChange = async (e) => {\r\n    const selectedTopic = e.target.value;\r\n    setTopic(selectedTopic);\r\n    setQuestions([]);\r\n    setScore(null);\r\n\r\n    if (selectedTopic) {\r\n      try {\r\n        const response = await axios.get(`http://localhost:5000/api/mocktest/questions/${selectedTopic}`);\r\n        setQuestions(response.data); // Assume API returns a list of questions\r\n      } catch (error) {\r\n        console.error('Error fetching questions:', error);\r\n        alert('Failed to fetch questions. Please try again.');\r\n      }\r\n    }\r\n  };\r\n\r\n  // Store selected answer for each question\r\n  const handleOptionSelect = (questionId, selectedOption) => {\r\n    setAnswers((prev) => ({\r\n      ...prev,\r\n      [questionId]: selectedOption, // Store answer by question ID\r\n    }));\r\n  };\r\n\r\n  // Calculate score on submit\r\n  const handleSubmit = () => {\r\n    let correctCount = 0;\r\n\r\n    // Loop through the questions and compare selected answer with correct answer\r\n    questions.forEach((q, index) => {\r\n      const userAnswer = answers[index];\r\n      if (userAnswer === q.correct) {\r\n        correctCount++;\r\n      }\r\n    });\r\n\r\n    // Set the score after submission\r\n    setScore(correctCount);\r\n  };\r\n\r\n  return (\r\n    <div className=\"mock-test\">\r\n      <h1 className=\"mock-test-header\">Mock Test</h1>\r\n\r\n      <div className=\"dropdown-container\">\r\n        <select onChange={handleTopicChange} value={topic} className=\"dropdown\">\r\n          <option value=\"\">Select a Topic</option>\r\n          {topics.map((t, index) => (\r\n            <option key={index} value={t}>\r\n              {t}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n\r\n      {questions.length > 0 && (\r\n        <div className=\"questions-container\">\r\n          {questions.map((q, index) => (\r\n            <div key={index} className=\"question-block\">\r\n              <h3 className=\"question\">{q.question}</h3>\r\n              <div className=\"options-container\">\r\n                {q.options.map((option, optIndex) => (\r\n                  <label key={optIndex} className=\"option-label\">\r\n                    <input\r\n                      type=\"radio\"\r\n                      name={`question-${index}`}\r\n                      value={option}\r\n                      onChange={() => handleOptionSelect(index, option)} // Store answer when an option is selected\r\n                    />\r\n                    {option}\r\n                  </label>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          ))}\r\n          <div className=\"submit-button-container\">\r\n            <button className=\"submit-button\" onClick={handleSubmit}>\r\n              Submit\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {score !== null && (\r\n        <div className=\"result-container\">\r\n          <h2>Your Score: {score}/{questions.length}</h2>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MockTest;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}